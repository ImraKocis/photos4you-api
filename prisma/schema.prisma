// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  seed     = "prisma/index.ts"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                     Int           @id @default(autoincrement())
  provider               Provider      @default(EMAIL)
  createdAt              DateTime      @default(now())
  updatedAt              DateTime      @updatedAt
  email                  String        @unique
  passwordHash           String?
  hashedRt               String?
  firstName              String?
  lastName               String?
  avatar                 String?
  role                   Role          @default(USER)
  posts                  Post[]
  subscription           Subscription?
  lastSubscriptionChange DateTime?

  @@map("users")
}

model Post {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  description String?  @db.VarChar(255)
  hashtags    String[]
  image       Image?
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int

  @@map("posts")
}

model Image {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  url       String
  size      Float
  Post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    Int      @unique

  @@map("images")
}

model Subscription {
  id              Int               @id @default(autoincrement())
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  name            SubscriptionRole  @default(FREE)
  validFrom       DateTime          @default(now())
  odlSubscription SubscriptionRole?

  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int  @unique

  UploadSize   UploadSize? @relation(fields: [uploadSizeId], references: [id])
  uploadSizeId Int?

  DailyLimit   DailyLimit? @relation(fields: [dailyLimitId], references: [id])
  dailyLimitId Int?

  @@map("subscriptions")
}

model UploadSize {
  id               Int              @id @default(autoincrement())
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  size             Float
  subscriptions    Subscription[]
  subscriptionName SubscriptionRole @default(FREE)

  @@map("upload_sizes")
}

model DailyLimit {
  id               Int              @id @default(autoincrement())
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  limit            Int
  subscriptions    Subscription[]
  subscriptionName SubscriptionRole @default(FREE)

  @@map("daily_limits")
}

model Log {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  action      String
  userId      Int?
  description String?
  role        Role?

  @@map("logs")
}

model Hardware {
  id     Int      @id @default(autoincrement())
  stock  Int?     @default(0)
  name   String?  @db.VarChar(255)
  price  Float?
  type   Type?
  code   String?
  Review Review[]

  @@map("hardvare")
}

model Review {
  id         Int      @id @default(autoincrement())
  hardwareId Int
  hardware   Hardware @relation(fields: [hardwareId], references: [id], onDelete: Cascade)
  rating     Float    @default(0.0)
  title      String?  @db.VarChar(255)
  text       String?  @db.VarChar(255)

  @@map("reviews")
}

enum Role {
  USER
  ADMIN
}

enum SubscriptionRole {
  FREE
  PRO
  GOLD
}

enum Type {
  CPU
  GPU
  SDD
  HDD
}

enum Provider {
  GOOGLE
  GITHUB
  EMAIL
}
